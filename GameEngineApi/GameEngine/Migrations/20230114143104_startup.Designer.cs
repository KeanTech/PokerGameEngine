// <auto-generated />
using System;
using GameEngine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameEngine.Migrations
{
    [DbContext(typeof(GameEngineContext))]
    [Migration("20230114143104_startup")]
    partial class startup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameEngine.Models.Game.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accessory");
                });

            modelBuilder.Entity("GameEngine.Models.Game.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Symbol")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("GameEngine.Models.Game.DeckCard", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("CardId", "TableId");

                    b.HasIndex("TableId");

                    b.ToTable("DeckCards");
                });

            modelBuilder.Entity("GameEngine.Models.Game.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChipsValue")
                        .HasColumnType("int");

                    b.Property<int>("CurrentBet")
                        .HasColumnType("int");

                    b.Property<bool>("IsFolded")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PokerTableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PokerTableId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("GameEngine.Models.Game.PlayerCard", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("CardId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerCards");
                });

            modelBuilder.Entity("GameEngine.Models.Game.PokerTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChipsValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("GameEngine.Models.Game.TableCard", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("CardId", "TableId");

                    b.HasIndex("TableId");

                    b.ToTable("TableCards");
                });

            modelBuilder.Entity("GameEngine.Models.Game.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChipsAquired")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("UserIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("GameEngine.Models.Game.Accessory", b =>
                {
                    b.HasOne("GameEngine.Models.Game.User", null)
                        .WithMany("Accessories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameEngine.Models.Game.DeckCard", b =>
                {
                    b.HasOne("GameEngine.Models.Game.Card", "Card")
                        .WithMany("Decks")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameEngine.Models.Game.PokerTable", "PokerTable")
                        .WithMany("CardDeck")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("PokerTable");
                });

            modelBuilder.Entity("GameEngine.Models.Game.Player", b =>
                {
                    b.HasOne("GameEngine.Models.Game.PokerTable", null)
                        .WithMany("Players")
                        .HasForeignKey("PokerTableId");
                });

            modelBuilder.Entity("GameEngine.Models.Game.PlayerCard", b =>
                {
                    b.HasOne("GameEngine.Models.Game.Card", "Card")
                        .WithMany("Players")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GameEngine.Models.Game.Player", "Player")
                        .WithMany("Cards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GameEngine.Models.Game.TableCard", b =>
                {
                    b.HasOne("GameEngine.Models.Game.Card", "Card")
                        .WithMany("Tables")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameEngine.Models.Game.PokerTable", "PokerTable")
                        .WithMany("Cards")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("PokerTable");
                });

            modelBuilder.Entity("GameEngine.Models.Game.User", b =>
                {
                    b.HasOne("GameEngine.Models.Game.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GameEngine.Models.Game.Card", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("Players");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("GameEngine.Models.Game.Player", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("GameEngine.Models.Game.PokerTable", b =>
                {
                    b.Navigation("CardDeck");

                    b.Navigation("Cards");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("GameEngine.Models.Game.User", b =>
                {
                    b.Navigation("Accessories");
                });
#pragma warning restore 612, 618
        }
    }
}
